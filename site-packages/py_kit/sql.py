# -*- coding: utf-8 -*-

import logging

from cve_ease.models import DBModel
from cve_ease.conf import gconfig
from sqlalchemy import create_engine, inspect, text, Column
from sqlalchemy_utils import create_database, database_exists
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
logger = logging.getLogger('cve-ease')



def sanitize_string(s):
    # 只保留基本字符集，删除非基本字符
    if s is None:
        return None
    return s.encode('ascii', 'ignore').decode('ascii')



class SQLSession(object):
    def __init__(self):
        dbconfig = gconfig['database']
        self.db_user = dbconfig['db_user']
        self.db_password = dbconfig['db_password']
        self.db_host = dbconfig['db_host']
        self.db_port = dbconfig['db_port']
        self.db_database = dbconfig['db_name']
        self.logger = logging.getLogger('cve-ease')

        SQLALCHEMY_DATABASE_URL = "sqlite:///{}/{}.db".format(
            gconfig['main']['base_path'],
            self.db_database
        )
        # print(SQLALCHEMY_DATABASE_URL)
        self.engine = create_engine(
            SQLALCHEMY_DATABASE_URL,
        )
        if not database_exists(self.engine.url):
            create_database(self.engine.url)
        DBModel.metadata.create_all(bind=self.engine)

    def get_engine(self):
        return self.engine

    def new_session(self):
        self.session = sessionmaker(autocommit=False, autoflush=False, bind=self.engine)
        return self.session()
    
    def has_table(self, table_name):
        inspector = inspect(self.engine)
        return inspector.has_table(table_name)

    def get_table_creation_time(self, table_name):
        query = text("""
            SELECT CREATE_TIME
            FROM information_schema.tables
            WHERE table_schema = DATABASE() AND table_name = :table_name;
        """)
        
        with self.engine.connect() as connection:
            result = connection.execute(query, table_name=table_name)
            row = result.fetchone()
            if row:
                return row['CREATE_TIME']
            return None

    def __del__(self):
        # logger.debug(" * close sql session properly")
        pass

database = SQLSession()