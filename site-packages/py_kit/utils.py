# -*- coding: utf-8 -*-

import datetime
import os.path
import requests
import re
from .errors import InputDirNotDirError
from cve_ease.sql import database
from cve_ease.conf import gconfig
#import baidu_translate as Translator
from deep_translator import GoogleTranslator
from cve_ease.models import RESULT, NVD, SRPM, CNNVD, CVRF, CWE, TEST
from cve_ease.notifier import FeishuSheet
from bs4 import BeautifulSoup




def get_timestamp():
    """
    Helper function for getting timestamp
    """
    return datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def get_format_timestamp(format):
    """
    Helper function for getting timestamp
    """
    return datetime.datetime.now().strftime(format)



def notifier_timestamp():
    return datetime.datetime.now().strftime("%Y年%m月%d日%H时%M分%S秒")



def to_list(lst):
    """
    Helper function for py2/py3 compatibility
    """
    if isinstance(lst, list):
        return lst
    else:
        return list(lst)


def makesure_direxists(path):
    """
    Helper function for makesure_direxists
    """
    if os.path.isfile(path):
        print("file")
        dirname = os.path.basename(path)
    if os.path.isdir(path):
        print("path")
        if not os.path.exists(path):
            os.makedirs(dir, exist_ok=True)


def ensuredir(dir):
    """Make sure dir exists"""
    dir = os.path.normpath(dir)
    if os.path.exists(dir):
        if not os.path.isdir(dir):
            raise InputDirNotDirError("Not a dir: %s" % dir)
    else:
        try:
            os.makedirs(dir, exist_ok=True)
        except Exception as e:
            raise CreateWorkdirError("Create workdir %s error %s" % (dir, str(e)))


def parseRPM(rpm_filename):
    """parse RPM package"""
    if rpm_filename[-4:] == '.rpm':
        rpm_filename = rpm_filename[:-4]

    index = rpm_filename.rfind('.')
    arch = rpm_filename[index + 1:]
    rpm_filename = rpm_filename[:index]

    index = rpm_filename.rfind('.')
    dist = rpm_filename[index + 1:]
    rpm_filename = rpm_filename[:index]

    index = rpm_filename[:index].rfind('-')
    release = rpm_filename[index + 1:]
    rpm_filename = rpm_filename[:index]

    index = rpm_filename[:index].rfind('-')
    ver = rpm_filename[index + 1:]
    rpm_filename = rpm_filename[:index]

    return rpm_filename, ver, release, arch, dist

# 解析configurations
def parseConfigurations(configurations):
    pass

def parse_cpe32_uri(cpe23_uri):
    info_list = cpe23_uri.split(":")
    for index, info in enumerate(info_list):
        if index == 2:
            type = info
        elif index == 4:
            component = info
        elif index == 5:
            ver = info
        elif index == 6:
            update_ver = info
        elif index == 7:
            rel_ver = info
    return type, component, ver, update_ver, rel_ver

def srpm_version_compare(old_srpm, new_srpm):
    """compare srpm version"""
    import rpm
    _, over, orel, _, _ = parseRPM(old_srpm)
    _, nver, nrel, _, _ = parseRPM(new_srpm)

    if rpm.labelCompare(('0', over, orel), ('0', nver, nrel)): 
        return True
    return False


def find_higest_srpm_version(srpmnamelist):
    if 0 == len(srpmnamelist):
        Exception(" list can't be null")
    if 1 == len(srpmnamelist):
        return srpmnamelist[0]
    import rpm
    import functools

    def compare(old_srpm, new_srpm):
        """compare srpm version"""
        import rpm
        _, over, orel, _, _ = parseRPM(old_srpm)
        _, nver, nrel, _, _ = parseRPM(new_srpm)
        ret = rpm.labelCompare(('0', over, orel), ('0', nver, nrel))
        if ret < 0:
            return 1
        elif ret > 0:
            return -1
        else:
            return 0

    return sorted(srpmnamelist, key=functools.cmp_to_key(compare))[0]


def do_download_file(url, path):
    import urllib
    with urllib.request.urlopen(url) as response, open(path, 'wb') as write_to:
        write_to.write(response.read())


def download_file(url, path, try_times=3):
    for try_index in range(try_times):
        try:
            do_download_file(url, path)
        except Exception as e:
            print("scrapy from '%s' error!" % url, str(e))
            if try_index == try_times - 1:
                print("try [%d] times failed! exit.")
                exit(1)
            print(" try again [%d/%d] " % (try_index + 1, try_times))
            continue
        break


def ungzfile(gzfile, output):
    import gzip
    with gzip.open(gzfile, 'rb') as fin, open(output, 'wb') as fout:
        buf = fin.read()
        if len(buf) > 1:
            fout.write(buf)


def get_wanip():
    import requests
    url = "http://ifconfig.me/ip"
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            return response.text.strip()
        return "unkown"
    except Exception:
        return "error"


def get_harzard_level(cvss_score):
    if cvss_score is None:
        return "/"
    if cvss_score >= 9 and cvss_score <= 10:
        return "超危"
    elif cvss_score >= 7 and cvss_score < 9:
        return "高危"
    elif cvss_score >= 4 and cvss_score < 7:
        return "中危"
    elif cvss_score >= 0 and cvss_score < 4:
        return "低危"
    else:
        return "未知"
    
def markdown_to_pdf(file_path, output_path):

    with open(file_path, 'r') as file:
        markdown_text = file.read()
    
    md2pdf.md2pdf(markdown_text, output_path)

def find_cve_from_str(str):
    pattern = r'CVE-\d{4}-\d{4,}'
    res = re.search(pattern=pattern, string=str)
    if res is None:
        return "False"
    else:
        return res.group()


def get_cwe_title(cwe_id):
    if cwe_id is None:
        return None
    if not cwe_id.startswith('CWE-'):
        return None
    cwe_id = cwe_id.split('-')[1]
    session = database.new_session()
    cwe = session.query(CWE).filter(CWE.cwe_id == cwe_id).first()
    if cwe is not None:
        return cwe.cwe_title

    title = None

    base_url = "https://cwe.mitre.org/data/definitions"
    url = f"{base_url}/{cwe_id}.html"
    response = requests.get(url)

    if response.status_code == 200:
        cwe = CWE()
        html_content = response.text
        # 解析HTML以提取描述信息（这里使用简单的方式，实际应用中可能需要更复杂的解析）
        soup = BeautifulSoup(html_content, 'html.parser')
        description_id = f"oc_{cwe_id}_Description"
        description_element = soup.find('div', class_='description')
        element_by_id = soup.find(id=description_id)
        title_text = soup.h2.text
        print(f"new cwe id find {cwe_id}")
        if element_by_id is not None:
            description_text = element_by_id.find(class_='indent').text
        else:
            description_text = None
        cwe.cwe_id = cwe_id
        # lang = Translator.detect_language(str(title_text))
        # if lang is None:
        #     title = title_text
        # else:
        #     title = Translator.translate_text(str(title_text))
        title = GoogleTranslator(source='auto', target='zh-CN').translate(str(title_text))
        cwe.cwe_title = title
        # lang = Translator.detect_language(str(description_text))
        # if lang is None:
        #     cwe.cwe_description = description_text
        # else:
        #     cwe.cwe_description = Translator.translate_text(str(description_text))
        cwe.cwe_description = GoogleTranslator(source='auto', target='zh-CN').translate(str(cwe.cwe_description))
        session.add(cwe)
        session.commit()
    else:
        print(f"Failed to fetch data, status code: {response.status_code}")

    return title
def generate_cve_desc(cve_id, sname, user=None):
    session = database.new_session()
    
    srpm = session.query(SRPM).filter(SRPM.sname == sname).first()
    if srpm is None:
        print(f"srpm: {sname} not found in database")
        return False

    res = session.query(RESULT).filter(RESULT.cveId == cve_id).first()
    if res is not None:
        print(f"cve_id: {cve_id} exist in database,")
        if res.affectedComponent is not None:
            if res.affectedComponent == "":
                res.affectedComponent = srpm.sname
            else:
                if res.affectedComponent.find(srpm.sname) == -1:
                    res.affectedComponent = res.affectedComponent + ";" + srpm.sname
                    print(f"update afectedComponent: {srpm.sname}")
            if res.srpmFileName == "":
                res.srpmFileName = srpm.sourcerpm
            else:
                if res.srpmFileName.find(srpm.sourcerpm) == -1:
                    print(res.srpmFileName)
                    res.srpmFileName = res.srpmFileName + ";" + srpm.sourcerpm
                    print(f"update srpmFileName: {res.srpmFileName}")
            session.commit()
        return False

    cve_detail = session.query(NVD).filter(NVD.cve_id == cve_id).first()
    if cve_detail is None:
        print(f"could not found cve_detail for {cve_id}")
        return False

    result = RESULT()
    result.affectedComponent = srpm.sname
    result.srpmFileName = srpm.sourcerpm
    result.srpmFileLink = os.path.join(gconfig['repodata']['repodata_src_url'], srpm.sourcerpm)
    result.cveId = cve_id
    cvrfs = session.query(CVRF).filter(CVRF.cveId.like(f'%{cve_id}%')).all()
    security_notice_no = ""
    for cvrf in cvrfs:
        security_notice_no += cvrf.securityNoticeNo + ";"
    result.securityNoticeNo = security_notice_no
    cnnvd = session.query(CNNVD).filter(CNNVD.cve_id == cve_id).first()
    if cnnvd is not None:
        result.cnnvdId = cnnvd.cnnvd_id
        result.cnnvdTitle = cnnvd.vul_name
    if cve_detail.impact is not None:
        if cve_detail.description is not None:
            # result.description = Translator.translate_text(str(cve_detail.description))
            # result.description = Translator.translate_text(str(cve_detail.description), from_='en', to='zh')
            result.description = GoogleTranslator(source='auto', target='zh-CN').translate(str(cve_detail.description))
        if cve_detail.references is not None:
            result.referenceLinks = cve_detail.references
        cwe_ids = cve_detail.problemtype['problemtype_data'][0]['description']
        cwe_id_lst = []
        cwe_title_lst = []
        for cwe_id in cwe_ids:
            cwe_id_lst.append(cwe_id['value'])
            cwe_title = get_cwe_title(cwe_id['value'])
            if cwe_title is not None:
                cwe_title_lst.append(cwe_title)
        result.cweId = ";".join(cwe_id_lst)
        result.cweTitle = ";".join(cwe_title_lst)
        if 'baseMetricV3' in cve_detail.impact:
            cvssScore = cve_detail.impact['baseMetricV3']['cvssV3']['baseScore']
            cvssVector = cve_detail.impact['baseMetricV3']['cvssV3']['vectorString']
        elif 'baseMetricV2' in cve_detail.impact:
            cvssScore = cve_detail.impact['baseMetricV2']['cvssV2']['baseScore']
            cvssVector = cve_detail.impact['baseMetricV2']['cvssV2']['vectorString']
        else:
            cvssScore = None
            cvssVector = None
        result.cvssScore = cvssScore
        result.cvssVector = cvssVector
    result.isFixed = False
    result.isISO = srpm.isISO
    result.isSheet = False
    result.discoveryDate = get_format_timestamp("%Y-%m-%d")
    result.announcementTime = cve_detail.publishedDate[:10]
    result.fixer = user
    session.add(result)
    session.commit()
    # result.patchReferenceLink = pr_html_url
    return result



def push_to_feishu(cve_id):
    session = database.new_session()
    res_item = session.query(RESULT).filter(RESULT.cveId == cve_id).first()
    rowdata = [
        res_item.id,
        res_item.cveId,
        res_item.cnnvdId,
        '/',
        res_item.cnnvdTitle,
        res_item.cweTitle if res_item.cweTitle else '其他',
        get_harzard_level(res_item.cvssScore),
        res_item.cvssScore,
        gconfig['repodata']['product_name'],
        res_item.description,
        res_item.patchLink if res_item.patchLink else '暂无',
        res_item.patchReferenceLink if res_item.patchReferenceLink else '暂无',
        '/',
        res_item.discoveryDate,
        res_item.announcementTime,
        '红旗内部漏扫发现',
        res_item.referenceLinks,
        res_item.fixer,
        res_item.affectedComponent,
        res_item.srpmFileName,
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        res_item.securityNoticeNo,
        '',
        '',
        '',
        '',
    ]
    res_item.isSheet = True
    session.commit()
    main_sheet = FeishuSheet()
    # main_sheet.append_one_rowdata(rowdata)
    main_sheet.add_one_blank_row()