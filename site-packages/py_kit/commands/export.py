# -*- coding: utf-8 -*-



import logging
import argparse

from cve_ease.core import Export
from .base import BaseCommand

logger = logging.getLogger('cve-ease')

class ExportCommand(BaseCommand):
    """export"""
    

    @staticmethod
    def register(subparsers):
        ExportCommand.parser = subparsers.add_parser('export', help='export check result')
        ExportCommand.parser.add_argument('-m', '--method', type=str, dest='method', choices=['txt', 'feishu', 'html', 'csv', 'fixed', 'nonfixed'], 
                        help='select export format')
        ExportCommand.parser.add_argument('-e', '--export', dest='export', action='store_true', default=False,
                        help='select this option and the results will be exported, otherwise the results will be printed to the screen')
        ExportCommand.parser.add_argument('-t', '--test', dest='test', action='store_true', default=False,
                        help='for test case')
        ExportCommand.parser.add_argument('-s', '--sync', dest='sync', action='store_true', default=False,
                        help='sync from feishu sheet')
        ExportCommand.parser.add_argument('-r', '--remote', dest='remote', action='store_true', default=False,
                        help='export remote repo cve')
        ExportCommand.parser.add_argument('-v', '--verbose', dest='verbose', default=None,
                        help='show verbose output')

    def handle(self, options):
        export = Export()
        if options.method:
            export.export(options.method, options.remote)
        elif options.test:
            # export.export_one_fix_record(options.test)
            # export.export_one_nonfix_record(options.test)
            export._update_status()
        elif options.sync:
            export.sync_from_feishu()
        else:
            ExportCommand.parser.print_help()
