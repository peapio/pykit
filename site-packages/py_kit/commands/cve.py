# -*- coding: utf-8 -*-


import json
import logging
import argparse

from cve_ease.scrapy import ScrapyCVE
from cve_ease.sql import database
from cve_ease.models import CVE
from cve_ease.conf import gconfig
from .base import BaseCommand

logger = logging.getLogger('cve-ease')


class CveCommand(BaseCommand):
    """cve"""

    parser = None
    @staticmethod
    def register(subparsers):
        CveCommand.parser = subparsers.add_parser('cve', help='official CVE info')
        CveCommand.parser.add_argument('-m', '--makecache', dest='makecache', action='store_true', default=False,
                        help='get cve cache')
        CveCommand.parser.add_argument('-l', '--list', dest='list', action='store_true', default=False,
                        help='list all cve info')
        CveCommand.parser.add_argument('-t', '--total', dest='total', action='store_true', default=False,
                        help='get cve info statistics')
        CveCommand.parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', default=False,
                        help='show verbose output')
    def handle(options):
        """[info] official CVE info"""

        session = database.new_session()

        if options.makecache:
            print("update cvelist git repo and put it all into database")
        elif options.total:
            total = session.query(CVE).count()
            print("cve total record :", total)
            if 0 == total:
                print(" WARNNING: no cve cache found! you should run 'cve-ease cve -m' to cache it.")
        elif options.list:
            total = session.query(CVE).count()
            if total == 0:
                print(" WARNNING: no cve cache found! you should run 'cve-ease cve -m' to cache it.")
            # cveDatabaseList = session.query(CVE).all()
            # if 0 == len(cveDatabaseList):
            #     print(" WARNNING: no cve cache found! you should run 'cve-ease cve -m' to cache it.")
            #     return
            # if options.verbose:
            #     CVE.pretty_output_title()
            #     for cve in cveDatabaseList:
            #         cve.simple_output()
            # else:
            #     for cve in cveDatabaseList:
            #         cve.pretty_output()
        else:
            CveCommand.parser.print_help()
