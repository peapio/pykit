
from cve_ease.conf import gconfig
from cve_ease.exception import RequestError, RateLimitExceededError
import requests
import json
from retrying import retry

class GiteeAPI():

    def __init__(self, sname) -> None:
        self.token = gconfig['main']['gitee_access_token']
        self.owner = "src-OpenEuler"
        self.branch = gconfig['repodata']['upstream_distribution_version']
        self.token = gconfig['main']['gitee_access_token']
        self.repo = sname
        pass
    # API
    @retry(exceptions=RateLimitExceededError, stop_max_attempt_number=5, wait_exponential_multiplier=1000,wait_exponential_max=3000,retry_on_exception=lambda e: isinstance(e, RateLimitExceededError))
    def get_repo_tree(self):
        base_url = f"https://gitee.com/api/v5/repos/{self.owner}/{self.repo}/git/trees/{self.branch}"

        payload = {
            "access_token": self.token,
        }
        try:
            response =  requests.get(base_url, params=payload)
            _response_text = response.text
        except RequestError as e:
            print(f"get_repo_tree error: {e}")
            return None
        
        if response.status_code != 200:
            print(f"Failed to access URL {base_url}, status_code: {response.status_code}")
            if response.status_code == 429:
                print(f"Rate limit exceeded, please try again later..")
                raise RateLimitExceededError()
            return None
        return json.loads(_response_text)
    
    def get_spec_from_tree(self):
        if self.repo == "kernel":
            return "kernel.spec"
        tree_info =  self.get_repo_tree()
        if tree_info is None:
            return None
        if "tree" not in tree_info:
            print(f"{self.repo} maybe not exist")
            return None
        for file in tree_info['tree']:
            if file["path"].endswith(".spec"):
                return file["path"]
        
        return None

    # API
    @retry(stop_max_attempt_number=5, wait_exponential_multiplier=1000,wait_exponential_max=3000,retry_on_exception=lambda e: isinstance(e, RateLimitExceededError))
    def get_release_blame(self):
        spec_file =  self.get_spec_from_tree()
        if spec_file is None:
            print(f"{self.repo} has no spec file")
            return None

        base_url = f"https://gitee.com/api/v5/repos/{self.owner}/{self.repo}/blame/{spec_file}"
        payload = {
            "access_token": self.token,
            "ref": self.branch
        }
        try:
            response =  requests.get(base_url, params=payload)
            _response_text = response.text
        except RequestError as e:
            print(f"get_release_blame error: {e}")
            return None
        
        if response.status_code != 200:
            print(
                f"Failed to access URL {base_url}"
            )
            if response.status_code == 429:
                print(f"Rate limit exceeded, please try again later..")
                raise RateLimitExceededError()
            return None
        return json.loads(_response_text)
        

    # API
    @retry(stop_max_attempt_number=5, wait_exponential_multiplier=1000,wait_exponential_max=3000,retry_on_exception=lambda e: isinstance(e, RateLimitExceededError))
    def get_all_issues(self, date_time, index):
        base_url = f"https://gitee.com/api/v5/repos/{self.owner}/{self.repo}/issues"

        payload = {
            "access_token": self.token,
            "owner": self.owner,
            "repo": self.repo,
            "state": "all",
            "sort": "created",
            "direction": "desc",
            "page": index,
            "per_page": 10,
            "finished_at": date_time,
        }
        try:
            response =  requests.get(base_url, params=payload)
            _response_text = response.text
        except RequestError as e:
            print(f"get_all_issues error: {e}")
            return None
        
        if response.status_code != 200:
            print(
                f"Failed to access URL {base_url}, code: {response.status_code}"
            )
            if response.status_code == 429:
                print(f"Rate limit exceeded, please try again later..")
                raise RateLimitExceededError()
            return None
        return json.loads(_response_text)
        

    # API
    @retry(stop_max_attempt_number=5, wait_exponential_multiplier=1000,wait_exponential_max=3000,retry_on_exception=lambda e: isinstance(e, RateLimitExceededError))
    def get_all_prs(self, index):
        base_url = f"https://gitee.com/api/v5/repos/{self.owner}/{self.repo}/pulls"

        payload = {
            "access_token": self.token,
            "owner": self.owner,
            "repo": self.repo,
            "base": self.branch,
            "state": "all",
            "sort": "created",
            "direction": "desc",
            "page": index,
            "per_page": 20,
        }
        try:
            response =  requests.get(base_url, params=payload)
            _response_text = response.text
        except RequestError as e:
            print(f"get_all_issues error: {e}")
            return None
        
        if response.status_code != 200:
            print(
                f"Failed to access URL {base_url}, code: {response.status_code}"
            )
            if response.status_code == 429:
                print(f"Rate limit exceeded, please try again later..")
                raise RateLimitExceededError()
            return None
        return json.loads(_response_text)

    # API
    @retry(stop_max_attempt_number=5, wait_exponential_multiplier=1000,wait_exponential_max=3000,retry_on_exception=lambda e: isinstance(e, RateLimitExceededError))
    def get_pr_with_issue(self, issue_id):
        base_url = f"https://gitee.com/api/v5/repos/{self.owner}/issues/{issue_id}/pull_requests"

        payload = {
            "access_token": self.token,
            "owner": self.owner,
            "repo": self.repo,
            "number": issue_id
        }
        try:
            response =  requests.get(base_url, params=payload)
            _response_text = response.text
        except RequestError as e:
            print(f"get_pr_with_issue error: {e}")
            return None
        
        if response.status_code != 200:
            print(
                f"Failed to access URL {base_url}, code: {response.status_code}"
            )
            if response.status_code == 429:
                print(f"Rate limit exceeded, please try again later..")
                raise RateLimitExceededError()
            return None
        return json.loads(_response_text)


    # API
    @retry(stop_max_attempt_number=5, wait_exponential_multiplier=1000,wait_exponential_max=3000,retry_on_exception=lambda e: isinstance(e, RateLimitExceededError))
    def get_issue_with_pr(self, pr_number):
        base_url = f"https://gitee.com/api/v5/repos/{self.owner}/{self.repo}/pulls/{pr_number}/issues"

        payload = {
            "access_token": self.token,
            "owner": self.owner,
            "repo": self.repo,
            "page": 1,
            "per_page": 20,
            "number": pr_number
        }
        try:
            response =  requests.get(base_url, params=payload)
            _response_text = response.text
        except RequestError as e:
            print(f"get_pr_with_issue error: {e}")
            return None
        
        if response.status_code != 200:
            print(
                f"Failed to access URL {base_url}, code: {response.status_code}"
            )
            if response.status_code == 429:
                print(f"Rate limit exceeded, please try again later..")
                raise RateLimitExceededError()
            return None
        return json.loads(_response_text)
    # API
    @retry(stop_max_attempt_number=5, wait_exponential_multiplier=1000,wait_exponential_max=3000,retry_on_exception=lambda e: isinstance(e, RateLimitExceededError))
    def get_pr_commits(self, commits_url):

        payload = {
            "access_token": self.token,
        }

        try:
            response =  requests.get(commits_url, params=payload)
            _response_text = response.text
        except RequestError as e:
            print(f"get_pr_commits error: {e}")
            return None
        
        if response.status_code != 200:
            print(
                f"Failed to access URL {commits_url}"
            )
            if response.status_code == 429:
                print(f"Rate limit exceeded, please try again later..")
                raise RateLimitExceededError()
            return None
        return json.loads(_response_text)

    # API
    @retry(stop_max_attempt_number=5, wait_exponential_multiplier=1000,wait_exponential_max=3000,retry_on_exception=lambda e: isinstance(e, RateLimitExceededError))
    def get_commit_detail(self, commit_url):

        payload = {
            "access_token": self.token,
        }

        try:
            response =  requests.get(commit_url, params=payload)
            _response_text = response.text
        except RequestError as e:
            print(f"get_commit_detail error: {e}")
            return None
        
        if response.status_code != 200:
            print(
                f"Failed to access URL {commit_url}"
            )
            if response.status_code == 429:
                print(f"Rate limit exceeded, please try again later..")
                raise RateLimitExceededError()
            return None
        return json.loads(_response_text)
