
import os
import json
from cve_ease.sql import database
from cve_ease.conf import gconfig
from cve_ease.utils import download_file, ungzfile
from cve_ease.models.nvd import NVD
from cve_ease.core import Scan

class Nvd():
    def __init__(self):
        self.session = database.new_session()
    
    
    def nvd_makecahe(self):
        self.download_nvd()
        self.write_to_database()

    def nvd_stat(self):
        total = self.session.query(NVD).count()
        if 0 == total:
            print(" WARNNING: no nvd cache found! you should run 'cve-ease nvd -m' to cache it.")
        print(f" * A total of {total} pieces of cvrf data were recorded")
    
    def nvd_list(self):
        nvdDatabaseList = self.session.query(NVD).all()
        if 0 == len(nvdDatabaseList):
            print(" WARNNING: no cvrf cache found! you should run 'cve-ease cvrf -m' to cache it.")
            return
        # CVRF.pretty_output_title()
        # for nvd in nvdDatabaseList:
        #     nvd.pretty_output()
    
    def nvd_check(self):
        scanner = Scan('nvd')
        scanner.scan()

    def download_nvd(self):
        nvd_config = gconfig['nvd']
        nvd_cache_path = nvd_config['nvd_cache_path']
        nvd_base_url = nvd_config['nvd_base_url']
        os.makedirs(nvd_cache_path, exist_ok=True)
        import datetime
        year = datetime.datetime.today().year
        nvd_begin_year = nvd_config['nvd_begin_year']
        begin_year = int(nvd_begin_year) if nvd_begin_year else 2005
        need_to_download = [str(y) for y in range(begin_year, year + 1)] + ['Modified']
        for index, yr in enumerate(need_to_download):
            targetfilename = "nvdcve-1.1-%s.json.gz" % str(yr)
            download_url = os.path.join(nvd_base_url, targetfilename)
            save_to = os.path.join(nvd_cache_path, targetfilename)
            save_ungzfile = save_to[:-3]

            if os.path.exists(save_to):
                print(save_to, " already downloaded!")
            else:
                print("download %s to %s" % (download_url, save_to))
                download_file(download_url, save_to, int(nvd_config['try_times']))

            if not os.path.exists(save_ungzfile):
                print("  ungz file to", save_ungzfile)
                ungzfile(save_to, save_ungzfile)
            print("[%5d/%-5d] Cache OK! %s" % (index + 1, len(need_to_download) , save_to))

        print("download from %s done!" % nvd_base_url)

    def write_to_database(self):
        print("\t * write to database...\t")
        nvd_cache_path = gconfig['nvd']['nvd_cache_path']

        NVD.__table__.drop(database.get_engine())
        NVD.__table__.create(database.get_engine())

        nvdDatabaseList = []
        nvd_jsons = os.listdir(nvd_cache_path)
        if len(nvd_jsons) == 0:
            print(f" error: Not found [{nvd_cache_path}]")
        for index, targetfile in enumerate(nvd_jsons):
            stored_in = os.path.join(nvd_cache_path, targetfile)
            if(targetfile.endswith("json")):
                print(stored_in)
                nvdDatabaseList = self.extrace_nvd_info(stored_in)
                self.session.bulk_insert_mappings(NVD, nvdDatabaseList)
                self.session.commit()
                print("write %s to db done![%s]" % (targetfile, len(nvdDatabaseList)))

        # recreate nvd table

        print(" * makecache done!")

    def extrace_nvd_info(self, cvejson_path):
        nvdDatabaseList = []
        json_data = None

        with open(cvejson_path, 'r') as jn:
            json_data = json.loads(jn.read())

        if json_data and 'CVE_Items' in json_data and len(json_data['CVE_Items']) > 0:
            for pcve in json_data['CVE_Items']:
                reference_urls = []
                for reference in pcve['cve']['references']['reference_data']:
                    reference_urls.append(reference['url'])
                nvdDatabaseList.append({
                    'cve_id': pcve['cve']['CVE_data_meta']['ID'],
                    'description': pcve['cve']['description']['description_data'][0]['value'],
                    'configurations': json.dumps(pcve['configurations']['nodes']),
                    'references': ";".join(reference_urls),
                    'problemtype': json.dumps(pcve['cve']['problemtype']),
                    'impact': json.dumps(pcve['impact']),
                    'publishedDate': pcve['publishedDate'],
                    'lastModifiedDate': pcve['lastModifiedDate'],
                })
        return nvdDatabaseList

