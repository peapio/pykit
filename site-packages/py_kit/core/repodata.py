import os
from cve_ease.conf import gconfig
from cve_ease.sql import database
from cve_ease.utils import find_higest_srpm_version
from cve_ease.utils import parseRPM
from cve_ease.models import Repos, RPM, SRPM 


class RepoData():

    def __init__(self):
        self.session = database.new_session()

    def __del__(self):
        self.session.close()

    def repodata_makecache(self):

        repodata_config = gconfig['repodata']
        local_repo = repodata_config['local_iso_mount_path']
        remote_repo = repodata_config['repodata_url']
        print(" * Using product:", remote_repo)

        repos = Repos()
        repos.addrepo(remote_repo, local_repo)
        allpkglist = repos.list()
        srpm_listdict = {}
        local_srpm = set()
        # recreate table
        RPM.__table__.drop(database.get_engine())
        RPM.__table__.create(database.get_engine())
        for index, (isISO, pkg) in enumerate(allpkglist):
            rpm = RPM()

            rpm.sourcerpm = pkg.sourcerpm
            rpm.sname, rpm.sver, rpm.srelease, _, rpm.sdist = parseRPM(rpm.sourcerpm)

            rpm.rpmname = pkg.rpmname
            rpm.name, rpm.ver, rpm.release, rpm.arch, rpm.dist = parseRPM(rpm.rpmname)

            rpm.location = pkg.location
            rpm.buildtime = pkg.build_time
            rpm.description = pkg.description
            rpm.isISO = isISO

            self.session.add(rpm)
            self.session.commit()

            if rpm.isISO:
                local_srpm.add(rpm.sname)

            if rpm.sname not in srpm_listdict:
                srpm_listdict[rpm.sname] = [rpm.sourcerpm]
            else:
                if rpm.sourcerpm not in srpm_listdict[rpm.sname]:
                    srpm_listdict[rpm.sname].append(rpm.sourcerpm)

            print("[%6d/%-6d] Cache OK! %s" % (index + 1, len(allpkglist), rpm.rpmname))
        print(" * organize cache, wait a moment...")
        # recreate table
        SRPM.__table__.drop(database.get_engine())
        SRPM.__table__.create(database.get_engine())

        for index, srpm in enumerate(srpm_listdict):
            max_version = find_higest_srpm_version(srpm_listdict[srpm])
            srpm = SRPM()
            srpm.sourcerpm = max_version
            srpm.sname, srpm.sver, srpm.srelease, _, srpm.sdist = parseRPM(max_version)
            srpm.downloadurl = os.path.join(repodata_config['repodata_src_url'], srpm.sourcerpm)
            if srpm.sname in local_srpm:
                srpm.isISO = True
            else:
                srpm.isISO = False
            print("[%6d/%-6d] Cache OK! %s" % (index + 1, len(srpm_listdict), srpm.sname))
            self.session.add(srpm)
            self.session.commit()

        print(" * cache SRPM table done!")

    def fetch_release_date(self):
        pass
        # commit_infos = gitee.get_release_blame()
        # release_commit_info = self._from_commit_infos_get_release(commit_infos, srpm.sver, srpm.srelease, srpm.sname == "kernel")
        # if release_commit_info is None:
        #     print(f"Maybe {srpm.sname} is not base on openEuler {self.branch}")
        #     return 0

        # release_date = release_commit_info["commit"]["author"]["date"]
        # release_format_date = release_date.replace("-", "")
        # release_format_date = release_format_date.replace(":", "")
        # print(release_format_date)

    def repodata_statistics(self):
        print("Using product:\n *", gconfig['repodata']['product_name'])
        print("\nremote repodata statistics:")
        total = self.session.query(RPM).count()
        print(" * rpm total record :", total)
        if 0 == total:
            print(" WARNNING: no rpm cache found! you should run 'cve-ease repodata -m' to cache it.")
        total = self.session.query(SRPM).count()
        print(" * srpm total record :", total)
        if 0 == total:
            print(" WARNNING: no srpm cache found! you should run 'cve-ease repodata -m' to cache it.")
        print("\nlocal iso repodata statistics:")
        total = self.session.query(RPM).filter(RPM.isISO == True).count()
        print(" * rpm total record :", total)
        if 0 == total:
            print(" WARNNING: no rpm cache found! you should run 'cve-ease repodata -m' to cache it.")
        total = self.session.query(SRPM).filter(SRPM.isISO == True).count()
        print(" * srpm total record :", total)
        if 0 == total:
            print(" WARNNING: no srpm cache found! you should run 'cve-ease repodata -m' to cache it.")

    def repodata_listall(self):
        rpmlist = self.session.query(RPM).all()
        if 0 == len(rpmlist):
            print(" WARNNING: no rpm cache found! you should run 'cve-ease repodata -m' to cache it.")
            return
        print(
            "%-45s %-20s %-35s %s(%s)" % ("NAME", "VERSION", "RELEASE", "SOURCE", "SNAME")
        )
        for pkg in rpmlist:
            print("%-45s %-20s %-35s %s(%s)" % (
                pkg.name,
                pkg.ver,
                pkg.release,
                pkg.sourcerpm,
                pkg.sname
            ))