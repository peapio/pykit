
import os
import csv
import json
import logging
from jinja2 import Environment, FileSystemLoader
from deep_translator import GoogleTranslator
#import baidu_translate as Translator
from cve_ease.sql import database
from cve_ease.models import RESULT, FIXED, RPM, NVD, CNNVD, QCMATCH, TEST
from cve_ease.utils import get_format_timestamp, get_harzard_level, parseRPM, get_cwe_title
from cve_ease.conf import gconfig
from cve_ease.notifier.feishu import FeishuSheet
from sqlalchemy import and_

logger = logging.getLogger('cve-ease')


class Export():

    def __init__(self):
        self.user = gconfig['main']['user']
        self.tool_name = gconfig['main']['name']
        self.session = database.new_session()
        self.check_results = self.session.query(RESULT).all()
        self.critical_num = self.session.query(RESULT).filter(and_(RESULT.cvssScore >= 9, RESULT.cvssScore <= 10)).count()
        self.high_num = self.session.query(RESULT).filter(and_(RESULT.cvssScore >= 7, RESULT.cvssScore < 9)).count()
        self.medium_num = self.session.query(RESULT).filter(and_(RESULT.cvssScore >= 4, RESULT.cvssScore < 7)).count()
        self.low_num = self.session.query(RESULT).filter(and_(RESULT.cvssScore >= 0, RESULT.cvssScore < 4)).count()
        self.total = self.session.query(RESULT).count()
        self.session = database.new_session()
        self.result_path = gconfig['main']['result_path']
        if not os.path.exists(self.result_path) or not self.result_path:
            logger.info("result path not exist, use default path")
            self.result_path = "/usr/share/cve-ease/result/"


    COLUMN = [
        "影响组件",
        "源码包",
        "源码包链接",
        "SA",
        "CVEID",
        "CVSS评分",
        "CVSS向量",
        "发布时间",
        "挖掘时间",
        "是否被修复",
    ]

    def __del__(self):
        self.session.close()

    def _content(self, data):
        pkg_lst = []
        if isinstance(data, list):
            for pkg in data:
                pkg_lst.append(pkg['text'])
        elif isinstance(data, str):
            data = data.strip()
            pkg_lst = data.split('\n')
        return pkg_lst


    def _update_status(self):
        # 插入之前更新之前插入的数据未被修复的状态
        main_sheet = FeishuSheet()
        sheet_data = main_sheet.get_mainsheet_data()
        new = 0
        old = 0
        for data in sheet_data:
            if data is None or data[0] is None:
                continue
            cve = self.session.query(RESULT).filter(RESULT.cveId == data[1]).first()
            if cve is None:
                cve = self.session.query(TEST).filter(TEST.cveId == data[1]).first()
            if cve:
                if data[21] == "已完成":
                    cve.isFixed = True
                cve.fixer = data[17]
            else:
                print(f"{data[1]} not found for fixer, maybe it's added by manual!")
            if data[21] and data[21].strip() == "已完成":
                new += 1
                if (self.session.query(FIXED).filter(FIXED.cve_id == data[1]).first() is None):
                    old += 1
                    fixed = FIXED()
                    fixed.cve_id = data[1]
                    fixed.fix_date = data[30]
                    fixed.fixer = data[17]
                    links = []
                    patches = []
                    if data[26] is not None and data[26] != "/":
                        for link in data[26]:
                            if link['text'] == "\n":
                                continue
                            links.append(link['text'].strip())
                    if data[25] is not None and data[25] != "/":
                        for patch in data[25]:
                            if patch['text'] == "\n":
                                continue
                            patches.append(patch['text'].strip())
                    fixed.gerrit_links = json.dumps(links)
                    fixed.patch_sources = json.dumps(patches)
                    fixed.is_abi_changed = True if data[23] == "是" else False
                    fixed.upgraded_package = self._get_rpms_from_src(self._content(data[24]))
                    fixed.verification_effect = data[28]
                    fixed.verification_method = data[29]
                    print(f"new cve fixed! fixer: {fixed.fixer}, cve_id: {fixed.cve_id}, date: {fixed.fix_date} ")
                    # print(isinstance(fixed.upgraded_package, list))
                    # print(fixed.upgraded_package)
                    self.session.add(fixed)
                
            
            self.session.commit()
                

        print(f"{old} old CVES were fixed!!")
        print(f"{new} new CVES were fixed!!")

    def _get_rpms_from_src(self, srpms):
        rpm_lst = []
        for srpm in srpms:
            if srpm is None:
                continue
            if srpm == "\n" or srpm == '':
                continue
            if 'src' not in srpm:
                rpm_lst.append(srpm)
                continue
            sname, ver, release, arch, dist = parseRPM(srpm)
            rpms = self.session.query(RPM).filter(RPM.sname == sname).all()
            for rpm in rpms:
                rpm_lst.append(rpm.name + '-' + ver + '-' + release + '.' + dist)
        return rpm_lst


    def export(self, method='txt', is_remote=False, is_preview = True):

        self.is_preview = is_preview
        self.is_remote = is_remote


        if method == "txt":
            self.export_txt()
        elif method == "csv":
            self.export_csv()
        elif method == "html":
            self.export_html()
        elif method == "feishu":
            self.export_feishu()
        elif method == "fixed":
            self._update_status()
            self.export_fix_record()
        elif method == "nonfixed":
            self._update_status()
            self.export_nonfix_record()
        else:
            logger.error("method not support")
    
    def export_txt(self):
        logger.info("export to txt")

        formats = [
            "%-10s",
            "%-15s",
            "%-30s",
            "%-10s",
            "%-10s",
            "%-10s",
            "%-15s",
            "%-10s",
            "%-10s",
            "%-10s",
        ]
        test = {
            "name": "asdf",
            "age": "xzcv",
        }
        title_list = [formats[i] % Export.COLUMN[i] for i in range(len(Export.COLUMN))]
        title_str = ' '.join(title_list)
        print(title_str, "\n")
        for check_result in self.check_results:
            format_str = ' '.join(formats)
            print(format_str % (
                check_result.affectedComponent,
                check_result.srpmFileName,
                check_result.srpmFileLink,
                check_result.securityNoticeNo,
                check_result.cveId,
                check_result.cvssScore,
                check_result.cvssVector,
                check_result.announcementTime,
                check_result.discoveryDate,
                check_result.isFixed,
            ))
    def export_csv(self):
        logger.info("export to csv")
        with open(self.result_file_path, mode='w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(Export.COLUMN)
            for check_result in self.check_results:
                writer.writerow([
                    check_result.affectedComponent,
                    check_result.srpmFileName,
                    check_result.srpmFileLink,
                    check_result.securityNoticeNo,
                    check_result.cveId,
                    check_result.cvssScore,
                    check_result.cvssVector,
                    check_result.announcementTime,
                    check_result.discoveryDate,
                    check_result.isFixed,
                ])

    def export_html(self):

        currentDir = os.path.dirname(os.path.abspath(__file__))
        file_loader = FileSystemLoader(searchpath=f"{currentDir}/../templates/")
        env = Environment(loader=file_loader)
        template = env.get_template("result.html")
        output = template.render(
            user = self.user,
            toolName = self.tool_name,
            total = self.total,
            critical = self.critical_num,
            high = self.high_num,
            medium = self.medium_num,
            low = self.low_num,
            check_results = self.check_results,
        )
        result_file_path = os.path.join(self.result_path, get_format_timestamp("%Y-%m-%d")) 
        if not os.path.exists(result_file_path):
            os.makedirs(result_file_path)
        result_file = os.path.join(result_file_path, "result.html")
        
        with open(result_file, mode='w', newline='') as file:
            file.write(output)
        print("HTML report has been generated at ", result_file)

        html_file_path = os.path.join(self.result_path, "html/")
        for check_result in self.check_results:
            html_file = os.path.join(html_file_path, check_result.cveId + ".html")
            if os.path.exists(html_file):
                continue
            template = env.get_template("cve_detail.html")
            output = template.render(
                cveId = check_result.cveId,
                level = '高级',
                cnnvdTitle = check_result.cnnvdTitle,
                fixer = check_result.fixer,
                isFixed = check_result.isFixed,
                affectedComponent = check_result.affectedComponent,
                cweId = check_result.cweId,
                cnnvdId = check_result.cnnvdId,
                cvssScore = check_result.cvssScore,
                cvssVector = check_result.cvssVector,
                discoveryDate = check_result.discoveryDate,
                announcementTime = check_result.announcementTime,
                description = check_result.description,
            )
            with open(html_file, mode='w', newline='') as file:
                file.write(output)
            print("cve details file has been generated at ", html_file)


    def export_feishu(self):
        main_sheet = FeishuSheet()
        print(main_sheet.main_sheet_id)
        for index, res_item in enumerate(self.check_results):
            if res_item.isSheet is True:
                continue
            rowdata = [
                res_item.id,
                res_item.cveId,
                res_item.cnnvdId,
                '/',
                res_item.cnnvdTitle,
                res_item.cweTitle if res_item.cweTitle else '其他',
                get_harzard_level(res_item.cvssScore),
                res_item.cvssScore,
                gconfig['repodata']['product_name'],
                res_item.description,
                res_item.patchLink if res_item.patchLink else '暂无',
                res_item.patchReferenceLink if res_item.patchReferenceLink else '暂无',
                '/',
                res_item.discoveryDate,
                res_item.announcementTime,
                '红旗内部漏扫发现',
                res_item.referenceLinks,
                '',
                res_item.affectedComponent,
                res_item.srpmFileName,
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                res_item.securityNoticeNo,
                '',
                '',
            ]
            res_item.isSheet = True
            main_sheet.append_one_rowdata(rowdata)
            print(f"[{index+1}/{self.total}]cveid: {res_item.cveId}")
        self.session.commit()
        logger.info("export to feishu")
    
    def export_fix_record(self):
        currentDir = os.path.dirname(os.path.abspath(__file__))
        file_loader = FileSystemLoader(searchpath=f"{currentDir}/../templates/")
        env = Environment(loader=file_loader)
        template = env.get_template("fix_record.md")

        fix_record_dir = self.result_path + "fixed/"
        if not os.path.exists(fix_record_dir):
            os.makedirs(fix_record_dir)

        records = self.session.query(FIXED).all()
        for record in records:
            self._export_one_fix_record(record, template, fix_record_dir)
    
    def _export_one_fix_record(self, record, template, fix_record_dir):
        fix_record_file = f"{fix_record_dir}{record.cve_id}.md"
        if os.path.exists(fix_record_file):
            return
        cve = self.session.query(RESULT).filter(RESULT.cveId == record.cve_id).first()
        if cve is None:
            cve = self.session.query(TEST).filter(TEST.cveId == record.cve_id).first()
            if cve is None:
                print(f"cve {record.cve_id} not found in database, maybe added by user")
                return
        rpm_lst = record.upgraded_package
        # rpm_str = record.upgraded_package.replace('\n', '<br>') if record.upgraded_package else ''
        # rpm_str = rpm_str.strip()
        # if rpm_str.endswith('<br>'):
        #     rpm_str = rpm_str[:-4]
        rpm_link_lst = []
        for rpm in rpm_lst:
            if rpm.find('rpm') != -1:
                rpm_link_lst.append(f"{gconfig['repodata']['repodata_url']}{rpm}")
            else:
                rpm_link_lst.append(f"{gconfig['repodata']['repodata_url']}{rpm}.rpm")
        description = cve.description if cve.description else '暂无'
        description = description.replace('\\', '\\\\')
        print(record.cve_id)
        output = template.render(
            discovery_date = cve.discoveryDate,
            cve_ease_user = gconfig['main']['user'],
            fix_date = str(record.fix_date),
            fixer = str(record.fixer),
            cve_title = cve.cnnvdTitle if cve.cnnvdTitle else '暂无',
            cve_id = cve.cveId,
            cnnvd_id = cve.cnnvdId,
            release_time = cve.announcementTime,
            severity = get_harzard_level(cve.cvssScore),
            cvss_score = str(cve.cvssScore),
            vul_type = cve.cweTitle if cve.cweTitle else '其他',
            reference_links = cve.referenceLinks.split(';') if cve.referenceLinks else [],
            affected_component = cve.affectedComponent[:-1] if cve.affectedComponent.endswith(';') else cve.affectedComponent,
            update_component = cve.affectedComponent.replace(';', ' ') if cve.affectedComponent else '',
            product_name = gconfig['repodata']['product_name'],
            vul_description = description,
            patch_sources = json.loads(record.patch_sources),
            is_abi_changed = "涉及" if record.is_abi_changed else "不涉及",
            gerrit_links = json.loads(record.gerrit_links),
            rpms = rpm_lst,
            rpms_link = rpm_link_lst,
            verification_method = record.verification_method,
            verification_effect = record.verification_effect,
        )
        with open(fix_record_file, mode='w', newline='') as file:
            file.write(output)
        print("Markdown file has been generated at ", fix_record_file)

    def export_one_fix_record(self, cve_id):
        currentDir = os.path.dirname(os.path.abspath(__file__))
        file_loader = FileSystemLoader(searchpath=f"{currentDir}/../templates/")
        env = Environment(loader=file_loader)
        template = env.get_template("fix_record.md")
        fix_record_dir = self.result_path + "fixed/"
        record = self.session.query(FIXED).filter(FIXED.cve_id == cve_id).first()
        if record is None:
            print(f"cve {cve_id} not found in database")
            return
        self._export_one_fix_record(record, template, fix_record_dir)

    def export_nonfix_record(self):
        currentDir = os.path.dirname(os.path.abspath(__file__))
        file_loader = FileSystemLoader(searchpath=f"{currentDir}/../templates/")
        env = Environment(loader=file_loader)
        template = env.get_template("nonfix_record.md")
        fix_record_dir = self.result_path + "nonfixed/"
        if not os.path.exists(fix_record_dir):
            os.makedirs(fix_record_dir)

        records = self.session.query(QCMATCH).filter(QCMATCH.is_match == False).all()
        for index, record in enumerate(records):
            self._export_one_nonfix_record(record, template, fix_record_dir)
            print(f"{index + 1}/{len(records)}")

    def export_one_nonfix_record(self, cve_id):
        currentDir = os.path.dirname(os.path.abspath(__file__))
        file_loader = FileSystemLoader(searchpath=f"{currentDir}/../templates/")
        env = Environment(loader=file_loader)
        template = env.get_template("nonfix_record.md")
        nonfix_record_dir = self.result_path + "nonfixed/"
        if not os.path.exists(nonfix_record_dir):
            os.makedirs(nonfix_record_dir)
        record = self.session.query(QCMATCH).filter(
            and_(
                QCMATCH.is_match == False,
                QCMATCH.cve_id == cve_id
            )
        ).first()
        if record is None:
            print(f"cve {cve_id} not found in database")
            return
        self._export_one_nonfix_record(record, template, nonfix_record_dir)

    def _export_one_nonfix_record(self, record, template, nonfix_record_dir):
        nonfix_record_file = f"{nonfix_record_dir}{record.cve_id}.md"
        if os.path.exists(nonfix_record_file):
            return
        nvd = self.session.query(NVD).filter(NVD.cve_id == record.cve_id).first()
        cnnvd = self.session.query(CNNVD).filter(CNNVD.cve_id == record.cve_id).first()
        vul_name = '暂无'
        cnnvd_id = '暂无'
        if cnnvd is not None and cnnvd.vul_name is not None:
            vul_name = cnnvd.vul_name
            cnnvd_id = cnnvd.cnnvd_id
        description = '暂无'
        if nvd.description is not None:
            description = GoogleTranslator(source='auto', target='zh-CN').translate(str(nvd.description))
            description = description.replace('\\', '\\\\')
        cvssScore = None
        if 'baseMetricV3' in nvd.impact:
            cvssScore = nvd.impact['baseMetricV3']['cvssV3']['baseScore']
        elif 'baseMetricV2' in nvd.impact:
            cvssScore = nvd.impact['baseMetricV2']['cvssV2']['baseScore']
        cwe_ids = nvd.problemtype['problemtype_data'][0]['description']
        cwe_id_lst = []
        cwe_title_lst = []
        for cwe_id in cwe_ids:
            cwe_id_lst.append(cwe_id['value'])
            cwe_title = get_cwe_title(cwe_id['value'])
            if cwe_title is not None:
                cwe_title_lst.append(cwe_title)
        cweTitle = ";".join(cwe_title_lst)
        comps = {}
        comp_texts = {}
        affected_components = {}
        for comp in json.loads(record.comp_name):
            if comp['isinV8'] is True:
                affected_components[comp['name']] = comp['sver']
            ver_str = ""
            ver_text = ""
            if comp['version'] is not None and comp['version'] != '' and comp['version'] != 'null' and comp['version'] != 'None' and comp['version'] != '*' and comp['version'] != '-':
                ver_str = comp['version']
                ver_text = f"影响版本为{comp['version']}"
            else:
                if comp['version_start_including'] is not None and comp['version_start_including'] != '-' and comp['version_start_including'] != '*':
                    ver_str = '[' + comp['version_start_including']
                    ver_text = f"影响版本范围为{comp['version_start_including']}（包含）"
                elif comp['version_startexcluding'] is not None and comp['version_startexcluding'] != '-' and comp['version_startexcluding'] != '*':
                    ver_str = '(' + comp['version_startexcluding']
                    ver_text = f"影响版本范围为{comp['version_startexcluding']}（不包含）"
                else:
                    ver_str = '[0'
                    ver_text = f"影响版本范围为0（包含）"
                if comp['version_end_including'] is not None and comp['version_end_including'] != '-' and comp['version_end_including'] != '*':
                    ver_str += ', ' + comp['version_end_including'] + ']'
                    ver_text += f"到{comp['version_end_including']}（包含）"
                elif comp['version_end_excluding'] is not None and comp['version_end_excluding'] != '-' and comp['version_end_excluding'] != '*':
                    ver_str += ', ' + comp['version_end_excluding'] + ')'
                    ver_text += f"到{comp['version_end_excluding']}（不包含）"
                else:
                    ver_str += ', ∞)'
                    ver_text += f"之后的所有版本"
            comps[comp['name']] = ver_str
            comp_texts[comp['name']] = ver_text
        output = template.render(
            discovery_date = '2024-10-25',
            cve_title = vul_name,
            cve_id = record.cve_id,
            cnnvd_id = cnnvd_id,
            release_time = nvd.publishedDate[:10],
            severity = get_harzard_level(cvssScore),
            cvss_score = str(cvssScore),
            vul_type = cweTitle if cweTitle else '其他',
            reference_links = nvd.references.split(';') if nvd.references else [],
            affected_components = affected_components,
            product_name = gconfig['repodata']['product_name'],
            vul_description = description,
            comp_texts = comp_texts,
            comps = comps,
        )
        with open(nonfix_record_file, mode='w', newline='') as file:
            file.write(output)
        print("Markdown file has been generated at ", nonfix_record_file)
        pass

    def read_all_from_feishu(self):
        for index, item in enumerate(self.session.query(RESULT).all()):
            item.isSheet = True
            self.session.commit()
            # res_item = self.session.query(RESULT).filter(RESULT.cveId == item.cveId).first()
            # if res_item is None:
            #     print(f"cve {item.cveId} not found")
            #     continue
            # item.affectedComponent = res_item.affectedComponent
            # item.srpmFileName = res_item.srpmFileName
            # item.srpmFileLink = res_item.srpmFileLink
            # item.securityNoticeNo = res_item.securityNoticeNo
            # item.cnnvdId = res_item.cnnvdId
            # item.cnnvdTitle = res_item.cnnvdTitle
            # item.cvssScore = res_item.cvssScore
            # item.cvssVector = res_item.cvssVector
            # item.description = res_item.description
            # item.referenceLinks = res_item.referenceLinks
            # item.cweId = res_item.cweId
            # item.cweTitle = res_item.cweTitle
            # item.patchLink = res_item.patchLink
            # item.patchReferenceLink = res_item.patchReferenceLink
            # item.cveState = res_item.cveState
            # item.announcementTime = res_item.announcementTime
            # item.updateTime = res_item.updateTime
            # item.discoveryDate = res_item.discoveryDate
            # item.fixer = res_item.fixer
            # item.isFixed = res_item.isFixed
            # item.isISO = res_item.isISO
            # item.isSheet = res_item.isSheet
            self.session.commit()
            # print(index, item.cveId)
        # main_sheet = FeishuSheet()
        # print(main_sheet.main_sheet_id)
        # sheet_data = main_sheet.get_mainsheet_data()
        # count = 0
        # for data in sheet_data:
        #     if data is None or data[0] is None:
        #         continue
        #     cveId = data[1]
        #     if cveId == '·':
        #         cveId = "CVE-2021-3670"
        #     result = TEST()
        #     result.cveId = cveId
        #     self.session.add(result)
        #     self.session.commit()
        #     count+=1

        # print(count)
            # result.cnnvdId = data[2]
            # result.cnnvdTitle = data[4]
            # result.cweTitle = data[5]
            # result.cvssScore = data[7]
            # result.description = data[9]
            # result.patchLink = data[10]
            # result.patchReferenceLink = data[11]
            # result.discoveryDate = data[13]
            # result.announcementTime = data[14]
            # result.referenceLinks = data[16]
            # result.affectedComponent = data[18]
            # result.srpmFileName = data[19]
            # result.securityNoticeNo = data[32]
    
    def test(self):
        main_sheet = FeishuSheet()
        print(main_sheet.Authorization)
        main_sheet.add_one_blank_row()

    def sync_from_feishu(self):
        main_sheet = FeishuSheet()
        sheet_data = main_sheet.get_mainsheet_data()
        RESULT.__table__.drop(database.get_engine())
        RESULT.__table__.create(database.get_engine())
        for index, data in enumerate(sheet_data):
            if data is None or data[0] is None:
                continue
            result = RESULT()
            result.cveId = data[1].strip()
            result.affectedComponent = data[18]
            result.srpmFileName = data[19]
            result.securityNoticeNo = data[31]
            result.cnnvdId = data[2]
            result.cnnvdTitle = data[4]
            result.description = self._content(data[9])[0]
            result.cweTitle = data[5]
            result.cvssSector = data[7]
            result.announcementTime = data[14]
            result.discoveryDate = data[13]
            result.isSheet = True
            self.session.add(result)
            self.session.commit()
            print(f"[{index + 1}/{len(sheet_data)}, {data[1]}")

